#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <string>
#include <fstream>
#include <streambuf>

#define NUM_TRIANGLE_VERTEX 3
#define ASSERT(x) if (!(x)) __debugbreak();

#ifdef _DEBUG
#define GLError(x) GLClearError(); x; ASSERT(GLLogCall(#x, __FILE__, __LINE__))
#else
#define GLError(x) x
#endif

static void GLClearError()
{
    while (glGetError());
}

static bool GLLogCall(const char* function, const char* file, int line)
{
    while (GLenum error = glGetError())
    {
        std::cout << "[OpenGL Error]: (0x" << std::hex << error << ")\n\ton line: " << std::dec << line << "\n\tby function: " << function << "\n\tin file: " << file << std::endl << std::endl;
        return false;
    }
    return true;
}

static unsigned int createShader(std::string type)
{
    std::ifstream t(type + ".shader");
    std::string temp((std::istreambuf_iterator<char>(t)),
        std::istreambuf_iterator<char>());

    const char* shaderSource = temp.c_str();
    // making a new shader object
    unsigned int shaderID = glCreateShader((type == "fragment") ? GL_FRAGMENT_SHADER : (type == "vertex") ? GL_VERTEX_SHADER : GL_GEOMETRY_SHADER);
    // Binding the source to shader
    glShaderSource(shaderID, 1, &shaderSource, NULL);
    // Compiling shader source
    glCompileShader(shaderID);

    // Checking for errors
    int  success;
    char infoLog[512];
    glGetShaderiv(shaderID, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(shaderID, 512, NULL, infoLog);
        std::cout << "[OpenGL Error]: " + type +" shader compilation failed\n" << infoLog << std::endl;
    }

    return shaderID;
}

// Function called when the window is resized
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

// Proccesses the input from window
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

int main()
{
    if (!glfwInit())
        return -1;

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // Create a window
    GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);

    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    // Makes the current window
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // Telling GLFW we want to call this function on every window resize by registering it
    unsigned int vertexShaderID = createShader("vertex");
    unsigned int fragmentShaderID = createShader("fragment");

    GLError(int program = glCreateProgram());
    GLError(glAttachShader(program, vertexShaderID));
    GLError(glAttachShader(program, fragmentShaderID));
    GLError(glLinkProgram(program));

    int  success;
    char infoLog[512];
    glGetProgramiv(program, GL_LINK_STATUS, &success);
    if (!success)
    {
        glGetProgramInfoLog(program, 512, NULL, infoLog);
        std::cout << "[OpenGL Error]: linking compilation failed\n" << infoLog << std::endl;
    }

    // Clearing Shader memory
    glDeleteShader(vertexShaderID);
    glDeleteShader(fragmentShaderID);

    // Vertecies of shape
    float vertices[] = {
     0.5f,  0.5f, 0.0f,
     0.5f, -0.5f, 0.0f,
    -0.5f, -0.5f, 0.0f,
    -0.5f,  0.5f, 0.0f 
    };

    unsigned int indices[] = {
        0, 1, 3,
        1, 2, 3 
    };

    // Create Vertex Buffer Object and Vertex Array Object
    unsigned int VBO, VAO, EBO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    glGenBuffers(1, &EBO);

    // Selecting Vertex Array Object to modify.
    glBindVertexArray(VAO);

    // Selecting which Vertex Buffer Object to modify
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    // Filling buffer with data.
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // Telling OpenGL how to read in the data.
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);

    // Will enable fetching by searching for attrib_index in VAO
    glEnableVertexAttribArray(0);
    // Unbinding the VBOs
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // Unbinding VAO
    glBindVertexArray(0);

    // Main loop
    while (!glfwWindowShouldClose(window))
    {
        processInput(window);
        
        // rendering here
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // What program to show
        glUseProgram(program);
        // Choosing the setting to draw in.
        glBindVertexArray(VAO);
        // Drawing triangle
        glDrawElements(GL_TRIANGLES, 7, GL_UNSIGNED_INT, 0);

        // glfw: swap buffers and poll IO events
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // Clearing memory
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteProgram(program);

    // Close window
    glfwTerminate();
    return 0;
}
